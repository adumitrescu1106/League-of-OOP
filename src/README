// Copyright Dumitrescu Andrei-Ciprian 324CA
					
				README - League Of OOP - Etapa 2

		Structura proiectului

	Pentru citirea datelor din fisierele de input am creat 2 clase (GameInput si GameInputLoader), prin care imi pastrez datele necesare rezolvarii cerintei. Direct din GameInputLoader stochez datele in diferite structuri de date pe care le-am considerat eficiente. In main am creat o instanta a clasei GameInput prin care mi-am transmis datele citite in functia main.
	Am creat o clasa de constante unde mi-am declarat valorile tuturor variabilelor pe care le-am folosit pentru rezolvarea cerintei.
	Proiectul meu mai contine o clasa Champion, care extinde fiecare tip de campion posibil (clasele Knight, Pyromancer, Rogue, Wizard), si o clasa Ability care extinde clasele abilitatilor fiecarui tip de campion (Execute, Slam, Fireblast, Ignite, Backstab, Paralysis, Drain, Deflect).
	Pentru a doua etapa am creat o clasa Angel, care extinde fiecare clasa/tip de inger. Ingerii "afecteaza" eroii prin intermediul interfetei Visitor.
	Am creat si 3 interfete: Visitor, care implementeaza fiecare abilitate si fiecare inger si care le permite abilitatilor si ingerilor sa afecteze campionii, interfata Visitable care implementeaza fiecare clasa de campion si care le permite campionilor sa fie afectati de abilitati, si interfata Strategy care implementeaza fiecare tip de campion, intrucat fiecare trebuie sa urmeze o strategie in lupta. In interiorul functiei de playStrategy(), eroul se ce strategie sa foloseasca, metoda apelandu-se in main de fiecare data cand eroul nu este incapacitat. metoda playStrategy() este unica pentru fiecare tip de erou.

		Implementare

	Pentru realizarea Double Dispatch-ului, am creat cate o clasa pentru fiecare abilitate in parte, pentru a putea realiza interactiunea fiecareia cu fiecare tip de campion pe care pot fi cast-uite. De aceea abilitatile sunt cele care "viziteaza", iar tipurile de campioni sunt "vizitate" (abilitatile au un efect asupra campionilor). In fiecare clasa ce reprezinta o abilitate, am implementat particularitatile fiecarei interactiuni a abilitatii cu campionii. La interactiunea cu wizard-ul se pastreaza damage-ul primit de wizard, pentru a putea fi dat inapoi prin intermediul abilitatii Deflect. La Ignite si Paralysis, se pastreaza tipul de efect overtime, durata lui, si damageul pe care playerul il primeste cat timp dureaza efectul overtime. Ca si in cazul abilitatilor, ingerii ii viziteaza pe campioni, modificandu-le HP-ul, XP-ul, modificatorii sau alte caracterstici.
	In functia main , in momentul unei lupte, al doilea erou din lupta "accepta" sa fie afectat de abilitatile playerului cu care se bate, iar mai apoi, primul erou "accepta" sa fie lovit, astfel respectandu-se ordinea campionilor. La inceputul fiecarei runde se realizeaza miscarile campionilor pe harta si se actualizeaza in clasa Campion campul pe care se afla playerul. Apoi verific daca trebuie sa se dea un damage overtime si efectuez luptele dintre playerii care se afla pe aceeasi pozitie, sunt amandoi "alive", sinu au luptat runda asta. In urma luptei, daca unul dintre cei 2 playeri moare, celalat primeste experienta pe baza formulei date si, daca are exp necesar, trece la alt nivel si i se restaureaza hp-ul. In cazul in care ambii eroi mor in lupta, amandoi primesc acelasi xp. La finalul rundei decrementez duratele efectelor overtime. Print-urile pentru Observer au fost realizate in main, de-a lungul derularii jocului in functie de lucrurile care s-au intamplat(spawn ingeri, efect ingeri, moartea unui erou, etc.). Am creat cazuri speciale in main pentru anumiti ingeri(Spawner, LevelUpAngel). Strategia fiecarui erou se stabileste inaite de lupta din runda respectiva. Dupa fiecare infulenta asupra modificatorilor eroilor, se apeleaza o functie care transimte modificatorii schimbati catre spell-urile eroului. Efectul ingerilor are loc la sfarsitul fiecarei runde. Functiile de print sunt modificate pentru fiecare tip de inger in parte. 